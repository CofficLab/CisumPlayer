# 打包苹果应用
# 准备工作：
# 1. AppStoreConnect网站-APP-用户和访问-集成-API，创建一个密钥，下载下来
# 2. base64 -i AuthKey_XXX.p8
# 3. GitHub Actions Secrets 添加
#   APP_STORE_CONNECT_KEY_BASE64
#   APP_STORE_CONNECT_KEY_ID
#   APP_STORE_CONNECT_KEY_ISSER_ID
# 4. 按这个步骤操作：https://docs.github.com/zh/actions/deployment/deploying-xcode-applications/installing-an-apple-certificate-on-macos-runners-for-xcode-development
# 原理：把本地开发的证书之类的凭据导入到GitHub Action的电脑
# 20240324：使用Xcode Cloud来做持续集成

on:
  push:
    branches:
      - deprecated

name: Build Apple Platform Applications(2)

jobs:
  build_with_signing:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.provisionprofile
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      - name: Archive
        run: |
          xcodebuild archive \
            -scheme Kuaiyizhi_Mac \
            -configuration Release \
            -archivePath ci/myapp \
            -destination 'generic/platform=macOS'
      - name: 生成 App Store Connect API 的 AuthKey
        env:
          APPSTORE_API_KEY_ID: ${{ secrets.APPSTORE_API_KEY_ID }}
          APPSTORE_API_PRIVATE_KEY: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
        run: |
          mkdir -p ./private_keys
          echo "$APPSTORE_API_PRIVATE_KEY" > ./private_keys/AuthKey_$APPSTORE_API_KEY_ID.p8
      - name: Export Archive
        env:
          APPSTORE_API_KEY_ID: ${{ secrets.APPSTORE_API_KEY_ID }}
          APPSTORE_API_ISSUER_ID: ${{ secrets.APPSTORE_API_ISSUER_ID }}
        run: |
          xcodebuild -exportArchive \
            -archivePath ci/myapp.xcarchive \
            -exportOptionsPlist .github/exportOptions.plist \
            -exportPath ci/pkg \
            -destination 'generic/platform=macOS' \
            -allowProvisioningUpdates \
            -authenticationKeyPath $(pwd)/private_keys/AuthKey_$APPSTORE_API_KEY_ID.p8 \
            -authenticationKeyID $APPSTORE_API_KEY_ID \
            -authenticationKeyIssuerID $APPSTORE_API_ISSUER_ID
      - name: 上传到 App Store
        env:
          APPSTORE_API_KEY_ID: ${{ secrets.APPSTORE_API_KEY_ID }}
          APPSTORE_API_ISSUER_ID: ${{ secrets.APPSTORE_API_ISSUER_ID }}
        run: |
          # 执行 xcrun altool -h 查看文档得知：私钥文件 AuthKey_<api_key>.p8 放在 ./private_keys 目录，会自动使用
          xcrun altool --upload-app \
            --type macos \
            -f ci/pkg/xxx.pkg \
            --apiKey $APPSTORE_API_KEY_ID \
            --apiIssuer $APPSTORE_API_ISSUER_ID
